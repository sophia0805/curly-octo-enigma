[{"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\index.js":"1","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\reportWebVitals.js":"2","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\App.js":"3","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\files\\FileDisplay.js":"4","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\FileManagerContext.js":"5","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\firebase.js":"6","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\header\\index.js":"7","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\index.js":"8","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\SidebarItem.js":"9","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\NewFile.js":"10"},{"size":528,"mtime":1734721545312,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1734305853372,"results":"13","hashOfConfig":"12"},{"size":911,"mtime":1734661702969,"results":"14","hashOfConfig":"12"},{"size":8510,"mtime":1734704266042,"results":"15","hashOfConfig":"12"},{"size":4130,"mtime":1734721515170,"results":"16","hashOfConfig":"12"},{"size":905,"mtime":1734721468239,"results":"17","hashOfConfig":"12"},{"size":1433,"mtime":1734642517128,"results":"18","hashOfConfig":"12"},{"size":1828,"mtime":1734641088827,"results":"19","hashOfConfig":"12"},{"size":490,"mtime":1734493104947,"results":"20","hashOfConfig":"12"},{"size":7798,"mtime":1734721529999,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l9fg0e",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\index.js",[],"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\reportWebVitals.js",[],"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\App.js",["47"],"import {useState} from 'react';\nimport Header from './components/header';\nimport Sidebar from './components/sidebar';\nimport FileDisplay from './components/files/FileDisplay.js';\nimport './styles/FileDisplay.css'\nimport { FileManagerProvider } from './components/FileManagerContext';\n\nfunction App() {\n  //i gave up with login\n  const [user, setUser] = useState({\n    displayName: \"Sophia is so cool\",\n    email: \"idkwhattoputhere@gmail.com\",\n    emailVerified: true,\n    phoneNumber: null,\n    photoURL: \"https://lh6.googleusercontent.com/-KyLTWqvDIHQ/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclcWGWqkt6YUAan32YO4CSR07Y2jw/s96-c/photo.jpg\"\n  })\n\n  return (\n    <FileManagerProvider>\n       <div className=\"App\">\n        <Header userPhoto={user.photoURL}/>\n        <Sidebar/>\n        <main className=\"app__main\">\n          <FileDisplay />\n        </main>\n      </div>\n    </FileManagerProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\files\\FileDisplay.js",["48"],"import React, { useState } from 'react';\r\nimport { useFileManager } from '../FileManagerContext';\r\nimport { db } from '../../firebase';\r\nimport '@mui/material';\r\nimport {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  ButtonGroup,\r\n  Button,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  MoreVert as MoreVertIcon,\r\n  GridView as GridViewIcon,\r\n  List as ListIcon,\r\n  Description as FileIcon,\r\n  Image as ImageIcon,\r\n  PictureAsPdf as PdfIcon,\r\n  Download as DownloadIcon,\r\n  Delete as DeleteIcon,\r\n  Star as StarIcon,\r\n  StarBorder as StarBorderIcon\r\n} from '@mui/icons-material';\r\n\r\nconst FileDisplay = () => {\r\n  const { \r\n    files, \r\n    searchQuery,\r\n    currentView,  // Make sure this is properly destructured\r\n    starredFiles,\r\n    toggleStarred,\r\n    moveToTrash,\r\n    restoreFromTrash,\r\n    permanentlyDelete\r\n  } = useFileManager();\r\n  \r\n  const [view, setView] = useState('list');\r\n  const [menuState, setMenuState] = useState({\r\n    anchorEl: null,\r\n    selectedFile: null\r\n  });\r\n\r\n  const handleMenuClick = (event, file) => {\r\n    event.stopPropagation();\r\n    setMenuState({\r\n      anchorEl: event.currentTarget,\r\n      selectedFile: file\r\n    });\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setMenuState({\r\n      anchorEl: null,\r\n      selectedFile: null\r\n    });\r\n  };\r\n\r\n  const handleFileAction = (action) => {\r\n    const { selectedFile } = menuState;\r\n    if (!selectedFile) return;\r\n\r\n    switch (action) {\r\n      case 'download':\r\n        const link = document.createElement('a');\r\n        link.href = selectedFile.data.data;\r\n        link.download = selectedFile.data.name;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        break;\r\n      case 'trash':\r\n        moveToTrash(selectedFile);\r\n        break;\r\n      case 'restore':\r\n        restoreFromTrash(selectedFile.id);\r\n        break;\r\n      case 'delete':\r\n        permanentlyDelete(selectedFile.id);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const getFileIcon = (fileType) => {\r\n    if (fileType.startsWith('image/')) return <ImageIcon />;\r\n    if (fileType.includes('pdf')) return <PdfIcon />;\r\n    return <FileIcon />;\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const formatDate = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    return new Date(timestamp).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const ListView = () => (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Type</TableCell>\r\n            <TableCell>Size</TableCell>\r\n            <TableCell>Modified</TableCell>\r\n            <TableCell align=\"right\">Actions</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {files.map((file) => (\r\n            <TableRow key={file.id} hover>\r\n              <TableCell>\r\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  {getFileIcon(file.data.type)}\r\n                  {file.data.name}\r\n                  <IconButton \r\n                    size=\"small\" \r\n                    onClick={() => toggleStarred(file.id)}\r\n                  >\r\n                    {starredFiles.has(file.id) ? <StarIcon color=\"warning\" /> : <StarBorderIcon />}\r\n                  </IconButton>\r\n                </Box>\r\n              </TableCell>\r\n              <TableCell>{file.data.type}</TableCell>\r\n              <TableCell>{formatFileSize(file.data.size)}</TableCell>\r\n              <TableCell>{formatDate(file.data.uploadDate)}</TableCell>\r\n              <TableCell align=\"right\">\r\n                <IconButton\r\n                  onClick={(e) => handleMenuClick(e, file)}\r\n                  aria-label=\"more options\"\r\n                >\r\n                  <MoreVertIcon />\r\n                </IconButton>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n\r\n  const GridView = () => (\r\n    <Grid container spacing={2}>\r\n      {files.map((file) => (\r\n        <Grid item xs={12} sm={6} md={4} lg={3} key={file.id}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Box \r\n                display=\"flex\" \r\n                justifyContent=\"space-between\" \r\n                alignItems=\"flex-start\"\r\n              >\r\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                  {getFileIcon(file.data.type)}\r\n                  <Typography variant=\"subtitle1\" noWrap sx={{ maxWidth: 150 }}>\r\n                    {file.data.name}\r\n                  </Typography>\r\n                  <IconButton \r\n                    size=\"small\" \r\n                    onClick={() => toggleStarred(file.id)}\r\n                  >\r\n                    {starredFiles.has(file.id) ? <StarIcon color=\"warning\" /> : <StarBorderIcon />}\r\n                  </IconButton>\r\n                </Box>\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={(e) => handleMenuClick(e, file)}\r\n                  aria-label=\"more options\"\r\n                >\r\n                  <MoreVertIcon />\r\n                </IconButton>\r\n              </Box>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {formatFileSize(file.data.size)}\r\n              </Typography>\r\n              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                Modified: {formatDate(file.data.uploadDate)}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Box p={3}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" mb={3}>\r\n        <Typography variant=\"h5\">\r\n          {currentView === 'myDrive' && 'My Drive'}\r\n          {currentView === 'starred' && 'Starred'}\r\n          {currentView === 'recent' && 'Recent'}\r\n          {currentView === 'bin' && 'Bin'}\r\n          {searchQuery && ` - Search results for \"${searchQuery}\"`}\r\n        </Typography>\r\n        <ButtonGroup variant=\"outlined\">\r\n          <Tooltip title=\"List view\">\r\n            <Button \r\n              onClick={() => setView('list')}\r\n              variant={view === 'list' ? 'contained' : 'outlined'}\r\n            >\r\n              <ListIcon />\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip title=\"Grid view\">\r\n            <Button \r\n              onClick={() => setView('grid')}\r\n              variant={view === 'grid' ? 'contained' : 'outlined'}\r\n            >\r\n              <GridViewIcon />\r\n            </Button>\r\n          </Tooltip>\r\n        </ButtonGroup>\r\n      </Box>\r\n\r\n      {files.length === 0 && (\r\n        <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\" py={4}>\r\n          {searchQuery \r\n            ? `No files found matching \"${searchQuery}\"`\r\n            : currentView === 'starred'\r\n            ? 'No starred files'\r\n            : currentView === 'bin'\r\n            ? 'Bin is empty'\r\n            : 'No files'}\r\n        </Typography>\r\n      )}\r\n\r\n      {files.length > 0 && (view === 'list' ? <ListView /> : <GridView />)}\r\n\r\n      <Menu\r\n        anchorEl={menuState.anchorEl}\r\n        open={Boolean(menuState.anchorEl)}\r\n        onClose={handleMenuClose}\r\n      >\r\n        <MenuItem onClick={() => handleFileAction('download')}>\r\n          <DownloadIcon sx={{ mr: 1 }} /> Download\r\n        </MenuItem>\r\n        {currentView === 'bin' ? (\r\n          <>\r\n            <MenuItem onClick={() => handleFileAction('restore')}>\r\n              <FileIcon sx={{ mr: 1 }} /> Restore\r\n            </MenuItem>\r\n            <MenuItem onClick={() => handleFileAction('delete')}>\r\n              <DeleteIcon sx={{ mr: 1 }} /> Delete Forever\r\n            </MenuItem>\r\n          </>\r\n        ) : (\r\n          <MenuItem onClick={() => handleFileAction('trash')}>\r\n            <DeleteIcon sx={{ mr: 1 }} /> Move to Bin\r\n          </MenuItem>\r\n        )}\r\n      </Menu>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FileDisplay;","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\FileManagerContext.js",["49","50","51"],"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst FileManagerContext = createContext();\r\n\r\nexport const FileManagerProvider = ({ children }) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [filteredFiles, setFilteredFiles] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [currentView, setCurrentView] = useState('myDrive');\r\n  const [starredFiles, setStarredFiles] = useState(new Set());\r\n  const [deletedFiles, setDeletedFiles] = useState([]);\r\n\r\n  // Fetch files from Firestore\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection('myFiles')\r\n      .orderBy('timestamp', 'desc')\r\n      .onSnapshot(snapshot => {\r\n        const fetchedFiles = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n          isDeleted: false\r\n        }));\r\n        setFiles(fetchedFiles);\r\n        filterFiles(fetchedFiles, searchQuery, currentView);\r\n      });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Filter files based on search query and current view\r\n  const filterFiles = (allFiles, query, view) => {\r\n    let filtered = allFiles;\r\n\r\n    // Apply search filter\r\n    if (query) {\r\n      filtered = filtered.filter(file =>\r\n        file.data.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Apply view filter\r\n    switch (view) {\r\n      case 'myDrive':\r\n        filtered = filtered.filter(file => !file.isDeleted);\r\n        break;\r\n      case 'starred':\r\n        filtered = filtered.filter(file => starredFiles.has(file.id));\r\n        break;\r\n      case 'recent':\r\n        filtered = filtered\r\n          .filter(file => !file.isDeleted)\r\n          .sort((a, b) => new Date(b.data.uploadDate) - new Date(a.data.uploadDate))\r\n          .slice(0, 20);\r\n        break;\r\n      case 'bin':\r\n        filtered = deletedFiles;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    setFilteredFiles(filtered);\r\n  };\r\n\r\n  // Update filters when dependencies change\r\n  useEffect(() => {\r\n    filterFiles(files, searchQuery, currentView);\r\n  }, [files, searchQuery, currentView, starredFiles, deletedFiles]);\r\n\r\n  const handleSearch = (query) => {\r\n    setSearchQuery(query);\r\n  };\r\n\r\n  const handleViewChange = (view) => {\r\n    setCurrentView(view);\r\n  };\r\n\r\n  const toggleStarred = async (fileId) => {\r\n    const newStarredFiles = new Set(starredFiles);\r\n    if (newStarredFiles.has(fileId)) {\r\n      newStarredFiles.delete(fileId);\r\n    } else {\r\n      newStarredFiles.add(fileId);\r\n    }\r\n    setStarredFiles(newStarredFiles);\r\n  };\r\n\r\n  const moveToTrash = (file) => {\r\n    setDeletedFiles(prev => [...prev, { ...file, isDeleted: true }]);\r\n    setFiles(prev => prev.filter(f => f.id !== file.id));\r\n  };\r\n\r\n  const restoreFromTrash = (fileId) => {\r\n    const fileToRestore = deletedFiles.find(f => f.id === fileId);\r\n    if (fileToRestore) {\r\n      setDeletedFiles(prev => prev.filter(f => f.id !== fileId));\r\n      setFiles(prev => [...prev, { ...fileToRestore, isDeleted: false }]);\r\n    }\r\n  };\r\n\r\n  const permanentlyDelete = async (fileId) => {\r\n    try {\r\n      // Delete from Firestore\r\n      await db.collection('myFiles').doc(fileId).delete();\r\n      // Remove from deletedFiles state\r\n      setDeletedFiles(prev => prev.filter(f => f.id !== fileId));\r\n    } catch (error) {\r\n      console.error('Error deleting file permanently:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    files: filteredFiles,\r\n    searchQuery,\r\n    currentView,\r\n    starredFiles,\r\n    deletedFiles,\r\n    handleSearch,\r\n    handleViewChange,\r\n    toggleStarred,\r\n    moveToTrash,\r\n    restoreFromTrash,\r\n    permanentlyDelete\r\n  };\r\n\r\n  \r\n  return (\r\n    <FileManagerContext.Provider value={value}>\r\n      {children}\r\n    </FileManagerContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useFileManager = () => {\r\n  const context = useContext(FileManagerContext);\r\n  if (!context) {\r\n    throw new Error('useFileManager must be used within a FileManagerProvider');\r\n  }\r\n  return context;\r\n};","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\firebase.js",[],"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\header\\index.js",["52"],"import React from 'react';\r\nimport { useFileManager } from '../FileManagerContext';\r\nimport '../../styles/Header.css';\r\nimport storageLogo from '../../pics/storage.png';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport AppsIcon from '@mui/icons-material/Apps';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\n\r\nconst Header = ({ userPhoto }) => {\r\n  const { searchQuery, handleSearch } = useFileManager();\r\n\r\n  const handleSearchChange = (e) => {\r\n    handleSearch(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__logo\">\r\n        <img src={storageLogo} alt=\"\"/>\r\n        <span>Drive</span>\r\n      </div>\r\n      <div className=\"header__searchContainer\">            \r\n        <div className=\"header__searchBar\">\r\n          <SearchIcon/>\r\n          <input \r\n            type='text' \r\n            placeholder='Search in storage'\r\n            value={searchQuery}\r\n            onChange={handleSearchChange}\r\n          />\r\n          <ExpandMoreIcon/>\r\n        </div>\r\n      </div>\r\n      <div className=\"header__icons\">\r\n        <span>\r\n          <HelpOutlineIcon/>\r\n          <SettingsIcon/>\r\n        </span>\r\n        <AppsIcon/>\r\n        <img src={userPhoto} alt=\"User Photo\"/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\index.js",[],"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\SidebarItem.js",[],"C:\\Users\\ms201\\Downloads\\curly-octo-enigma\\src\\components\\sidebar\\NewFile.js",["53","54"],"import React, { useState } from 'react';\r\nimport { \r\n  Modal, \r\n  Box, \r\n  Typography, \r\n  Button, \r\n  IconButton,\r\n  LinearProgress,\r\n  styled,\r\n  Alert,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondary,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport '../../styles/SidebarItem.css';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { db } from '../../firebase';\r\n\r\nconst ModalBox = styled(Box)(({ theme }) => ({\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 500,\r\n  backgroundColor: theme.palette.background.paper,\r\n  borderRadius: '8px',\r\n  boxShadow: '0 4px 20px rgba(0,0,0,0.15)',\r\n  padding: '24px',\r\n  maxHeight: '80vh',\r\n  overflowY: 'auto'\r\n}));\r\n\r\nconst UploadButton = styled(Button)({\r\n  marginTop: '20px',\r\n  width: '100%'\r\n});\r\n\r\nconst FileInput = styled('input')({\r\n  display: 'none'\r\n});\r\n\r\nconst DropZone = styled(Box)(({ isDragActive, hasFiles }) => ({\r\n  border: '2px dashed #ccc',\r\n  borderRadius: '8px',\r\n  padding: '40px 20px',\r\n  textAlign: 'center',\r\n  cursor: 'pointer',\r\n  backgroundColor: isDragActive ? '#f0f7ff' : hasFiles ? '#e8f5e9' : '#fafafa',\r\n  transition: 'all 0.3s ease',\r\n  '&:hover': {\r\n    backgroundColor: '#f0f7ff',\r\n    borderColor: '#2196f3'\r\n  }\r\n}));\r\n\r\nconst NewFile = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [uploadProgress, setUploadProgress] = useState({});\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    setError('');\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSelectedFiles([]);\r\n    setUploadProgress({});\r\n    setError('');\r\n    setUploading(false);\r\n  };\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\r\n      setDragActive(true);\r\n    } else {\r\n      setDragActive(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    \r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    setSelectedFiles(prev => [...prev, ...droppedFiles]);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files || []);\r\n    setSelectedFiles(prev => [...prev, ...files]);\r\n  };\r\n\r\n  const removeFile = (index) => {\r\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\r\n    setError('');\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) return '0 Byte';\r\n    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n  };\r\n\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFiles.length) return;\r\n    try {\r\n      setUploading(true);\r\n      \r\n      // Upload files sequentially to maintain consistent progress\r\n      for (let i = 0; i < selectedFiles.length; i++) {\r\n        const file = selectedFiles[i];\r\n        setUploadProgress(prev => ({ ...prev, [i]: 25 }));\r\n\r\n        // Convert file to base64\r\n        const base64File = await convertToBase64(file);\r\n        setUploadProgress(prev => ({ ...prev, [i]: 50 }));\r\n\r\n        // Create file metadata\r\n        const fileData = {\r\n          name: file.name,\r\n          type: file.type,\r\n          size: file.size,\r\n          data: base64File,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          uploadDate: new Date().toISOString(),\r\n        };\r\n\r\n        setUploadProgress(prev => ({ ...prev, [i]: 75 }));\r\n\r\n        // Save to Firestore\r\n        await db.collection('myFiles').add(fileData);\r\n        setUploadProgress(prev => ({ ...prev, [i]: 100 }));\r\n      }\r\n\r\n      setTimeout(handleClose, 500);\r\n\r\n    } catch (error) {\r\n      console.error('Error uploading files:', error);\r\n      setError('Failed to upload files. Please try again.');\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"newFile\">\r\n      <div className=\"newFile__container\" onClick={handleOpen}>\r\n        <AddIcon fontSize=\"large\" />\r\n        <p>New</p>\r\n      </div>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <ModalBox>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n            <Typography variant=\"h6\">Upload Files</Typography>\r\n            <IconButton onClick={handleClose} size=\"small\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          <FileInput\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            onChange={handleChange}\r\n            multiple\r\n          />\r\n\r\n          <label htmlFor=\"file-upload\">\r\n            <DropZone\r\n              onDragEnter={handleDrag}\r\n              onDragLeave={handleDrag}\r\n              onDragOver={handleDrag}\r\n              onDrop={handleDrop}\r\n              isDragActive={dragActive}\r\n              hasFiles={selectedFiles.length > 0}\r\n            >\r\n              <CloudUploadIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Drag and drop your files here\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                or click to select files\r\n              </Typography>\r\n            </DropZone>\r\n          </label>\r\n\r\n          {selectedFiles.length > 0 && (\r\n            <List sx={{ mt: 2 }}>\r\n              {selectedFiles.map((file, index) => (\r\n                <ListItem\r\n                  key={index}\r\n                  secondaryAction={\r\n                    !uploading && (\r\n                      <IconButton edge=\"end\" onClick={() => removeFile(index)}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    )\r\n                  }\r\n                >\r\n                  <ListItemText\r\n                    primary={file.name}\r\n                    secondary={formatFileSize(file.size)}\r\n                  />\r\n                  {uploading && (\r\n                    <Box sx={{ width: 60, textAlign: 'right' }}>\r\n                      {uploadProgress[index] !== undefined ? (\r\n                        `${uploadProgress[index]}%`\r\n                      ) : (\r\n                        <CircularProgress size={20} />\r\n                      )}\r\n                    </Box>\r\n                  )}\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          )}\r\n\r\n          <UploadButton\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleUpload}\r\n            disabled={!selectedFiles.length || uploading}\r\n            startIcon={<CloudUploadIcon />}\r\n          >\r\n            {uploading ? 'Uploading...' : `Upload ${selectedFiles.length} File${selectedFiles.length !== 1 ? 's' : ''}`}\r\n          </UploadButton>\r\n        </ModalBox>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewFile;",{"ruleId":"55","severity":1,"message":"56","line":10,"column":16,"nodeType":"57","messageId":"58","endLine":10,"endColumn":23},{"ruleId":"55","severity":1,"message":"59","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":12},{"ruleId":"55","severity":1,"message":"60","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":31,"column":6,"nodeType":"63","endLine":31,"endColumn":8,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":71,"column":6,"nodeType":"63","endLine":71,"endColumn":67,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":42,"column":9,"nodeType":"69","endLine":42,"endColumn":48},{"ruleId":"55","severity":1,"message":"70","line":8,"column":3,"nodeType":"57","messageId":"58","endLine":8,"endColumn":17},{"ruleId":"55","severity":1,"message":"71","line":14,"column":3,"nodeType":"57","messageId":"58","endLine":14,"endColumn":20},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","'db' is defined but never used.","'firebase' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentView', 'filterFiles', and 'searchQuery'. Either include them or remove the dependency array.","ArrayExpression",["72"],"React Hook useEffect has a missing dependency: 'filterFiles'. Either include it or remove the dependency array.",["73"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'LinearProgress' is defined but never used.","'ListItemSecondary' is defined but never used.",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [currentView, filterFiles, searchQuery]",{"range":"78","text":"79"},"Update the dependencies array to be: [files, searchQuery, currentView, starredFiles, deletedFiles, filterFiles]",{"range":"80","text":"81"},[1102,1104],"[currentView, filterFiles, searchQuery]",[2183,2244],"[files, searchQuery, currentView, starredFiles, deletedFiles, filterFiles]"]